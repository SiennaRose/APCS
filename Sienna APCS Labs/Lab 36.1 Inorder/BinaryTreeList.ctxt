#BlueJ class context
comment0.params=
comment0.target=BinaryTreeList()
comment0.text=\n\ \ Constructor\ for\ the\ SinglyLinkedList\ object\n\ \ Generates\ an\ empty\ list.\n
comment1.params=
comment1.target=boolean\ isEmpty()
comment1.text=\n\ \ Returns\ true\ if\ this\ tree\ contains\ no\ elements.\n\n\ @return\ \ \ \ true\ if\ the\ tree\ is\ empty\n
comment10.params=
comment10.target=void\ inorder()
comment10.text=\n\ Prints\ all\ the\ elements\ of\ the\ list\n
comment11.params=temp
comment11.target=void\ inorderHelper(TreeNode)
comment11.text=\n\ \ Prints\ all\ the\ elements\ of\ the\ list\n
comment12.params=
comment12.target=void\ clear()
comment12.text=\n\ \ Removes\ all\ of\ the\ elements\ from\ this\ binary\ tree.\n
comment2.params=element
comment2.target=void\ insert(java.lang.Object)
comment2.text=\n\ Passes\ the\ element\ given\ and\ the\ root\ TreeNode\ to\ the\ overlaoding\ insert\ method\ to\ recursively\ \n\ insert\ the\ new\ element.\ \n\ \n\ @param\ \ element\ \ \ \ element\ to\ be\ passed\n
comment3.params=node\ element
comment3.target=TreeNode\ insert(TreeNode,\ java.lang.Object)
comment3.text=\n\ \ Inserts\ the\ specified\ element\ at\ the\ position\ in\ this\ list\n\ \ according\ to\ the\ natural\ ordering\ of\ its\ elements.\ All\ elements\n\ \ in\ the\ list\ must\ implement\ the\ Comparable\ interface.\ Shifts\n\ \ the\ element\ currently\ at\ that\ position\ (if\ any)\ and\ any\n\ \ subsequent\ elements\ to\ the\ right.\n\n\ @param\ \ element\ \ element\ to\ be\ inserted\n
comment4.params=element
comment4.target=Item\ find(java.lang.Comparable)
comment4.text=\n\ Passes\ root\ of\ Binary\ tree\ and\ element\ to\ find\ to\ the\ helper\ method\:\ overloading\n\ \n\ returns\ and\ item\ that\ either\ is\ null\ or\ is\ the\ item\ \n
comment5.params=tree\ valueToFind
comment5.target=TreeNode\ find(TreeNode,\ java.lang.Comparable)
comment5.text=\n\ \ Returns\ the\ first\ occurrence\ of\ the\ specified\ element,\ or\ null\n\ \ if\ the\ List\ does\ not\ contain\ this\ element.\n\n\ @param\ \ element\ \ element\ to\ search\ for.\n\ @return\ \ \ \ \ \ \ \ first\ occurrence\ of\ the\ specified\ element,\ or\ null\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ if\ the\ list\ doesn\ not\ contain\ the\ element.\n
comment6.params=target
comment6.target=void\ delete(java.lang.Comparable)
comment6.text=\n\ deletes\ the\ specified\ target\ from\ the\ binary\ tree,\ however\ it\ does\ this\ by\ replacing\ \n\ the\ target\ value\ with\ the\ left\ most\ node\ in\ the\ right\ subtree(mirror\ perspective)\n\ \n\ pasees\ the\ traget\ as\ well\ as\ the\ root\ to\ deleteHelper\n
comment7.params=node\ target
comment7.target=TreeNode\ deleteHelper(TreeNode,\ java.lang.Comparable)
comment7.text=\n\ </>summary</>\:\ attempts\ to\ locate\ the\ target\ node\ to\ be\ deleted\ within\ the\ binary\ tree\ recursively\n\ if\ the\ node\ passed\ is\ smaller\ than\ the\ target\ value\ the\ recursive\ call\ will\ call\ the\ node\ on\ its\ right\n\ if\ the\ node\ passed\ is\ larger\ than\ the\ target\ value\ than\ the\ recursive\ call\ will\ call\ the\ node\ on\ its\ left\n\ if\ there\ is\ no\ node\ within\ the\ binary\ tree\ that\ matches\ the\ target\ value\ then\ a\ exception\ is\ thrown\n\ \n\ when\ the\ target\ is\ found\ within\ the\ binary\ tree\ it\ passes\ the\ target\ on\ to\ the\ deleteTargetNode\ method\ where\ \n\ it\ will\ be\ deleted\n\ \n\ parameter\ TreeNode\ node\ \ \ \ \ \ \ \ starts\ out\ as\ root\ and\ advances\ along\ the\ binary\ tree\ searching\ for\ target\n\ parameter\ Comparable\ target\ \ \ \ the\ value\ being\ searched\ for\ \ \ \n\ \n\ return\ TreeNode\ \ \ \ the\ root\n
comment8.params=target
comment8.target=TreeNode\ deleteTargetNode(TreeNode)
comment8.text=\n\ </>summary</>\:\ Deletes\ the\ specified\ target\ within\ the\ binary\ tree\ by\ replacing\ \n\ the\ value\ of\ the\ target\ node\ with\ the\ value\ of\ the\ left\ most\ node\ in\ the\ right\ \n\ subtree(mirror\ perspective\ of\ the\ code\ in\ lesson\ 35)\n\ \n\ parameter\ TreeNode\ target\ \ the\ node\ with\ the\ target\ value\ \n\n\ return\ TreeNode\ \ \ \ the\ node\ replacement\ for\ the\ one\ deleted(left\ most\ node\ in\ right\ subtree)\n
comment9.params=
comment9.target=int\ size()
comment9.text=\n\ \ Returns\ the\ number\ of\ elements\ in\ this\ list.\n\n\ @return\ \ \ \ number\ of\ elements\ in\ this\ list.\n
numComments=13
